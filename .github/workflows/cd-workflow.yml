name: Continuous Deployment Workflow

on:
  push:
    branches:
      - main
    paths:
      - 'operations/01-provision/**'
      - 'operations/02-deploy/**'
      - 'conversational-ui/**'
      - 'issue-solver/**'
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    paths:
      - 'operations/01-provision/**'
      - 'operations/02-deploy/**'
      - 'conversational-ui/**'
      - 'issue-solver/**'

permissions:
  id-token: write
  contents: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      provision-changes: ${{ steps.filter.outputs.provision }}
      deploy-changes: ${{ steps.filter.outputs.deploy }}
      app-changes: ${{ steps.filter.outputs.app }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            provision:
              - 'operations/01-provision/**'
            deploy:
              - 'operations/02-deploy/**'
            app:
              - 'conversational-ui/**'
              - 'issue-solver/**'

  provision:
    needs: detect-changes
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.provision-changes == 'true' || needs.detect-changes.outputs.deploy-changes == 'true' || needs.detect-changes.outputs.app-changes == 'true')) ||
      (github.event_name == 'pull_request' && github.event.action != 'closed' && (needs.detect-changes.outputs.provision-changes == 'true' || needs.detect-changes.outputs.deploy-changes == 'true' || needs.detect-changes.outputs.app-changes == 'true'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.10"

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin

      # Add authentication steps here if needed
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::034362042699:role/GitHubActionsRole
          role-session-name: SessionGitHubActions
          aws-region: eu-west-3

      - name: Apply provision
        run: |
          cd operations/01-provision
          terraform init -reconfigure
          just apply
        env:
          GH_PR_NUMBER: ${{ github.event.pull_request.number }}
          TF_VAR_supabase_token: ${{ secrets.TF_VAR_SUPABASE_TOKEN }}
          TF_VAR_supabase_organization_slug: ${{ secrets.TF_VAR_SUPABASE_ORGANIZATION_SLUG }}

  package-lambda:
    needs: [ detect-changes ]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.deploy-changes == 'true' || needs.detect-changes.outputs.app-changes == 'true')) ||
      (github.event_name == 'pull_request' && github.event.action != 'closed' && (needs.detect-changes.outputs.deploy-changes == 'true' || needs.detect-changes.outputs.app-changes == 'true'))
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./issue-solver
    env:
      IMAGE_ENV_TAG: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || 'production' }}
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v2

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        run: uv python install

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::034362042699:role/GitHubActionsRole
          role-session-name: SessionGitHubActions
          aws-region: eu-west-3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push webapi container image
        uses: docker/build-push-action@v6
        with:
          context: 'issue-solver'
          file: issue-solver/webapi.Dockerfile
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-webapi-${{ github.sha }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-webapi-${{ env.IMAGE_ENV_TAG }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-webapi-${{ env.IMAGE_ENV_TAG }}-${{ github.sha }}

      - name: Build and push worker container image
        uses: docker/build-push-action@v6
        with:
          context: 'issue-solver'
          file: issue-solver/worker.Dockerfile
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-worker-${{ github.sha }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-worker-${{ env.IMAGE_ENV_TAG }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-worker-${{ env.IMAGE_ENV_TAG }}-${{ github.sha }}

      - name: Build Lambda package
        run: |
          just build-lambda-package

      - name: Upload Lambda package
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: issue-solver/package.zip
          retention-days: 1

  deploy:
    needs: [ detect-changes, provision, package-lambda ]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.deploy-changes == 'true' || needs.detect-changes.outputs.app-changes == 'true')) ||
      (github.event_name == 'pull_request' && github.event.action != 'closed' && (needs.detect-changes.outputs.deploy-changes == 'true' || needs.detect-changes.outputs.app-changes == 'true'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.10"

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin

      - name: Download Lambda package
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: issue-solver

      # Add authentication steps here if needed
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::034362042699:role/GitHubActionsRole
          role-session-name: SessionGitHubActions
          aws-region: eu-west-3

      - name: Apply deploy
        run: |
          cd operations/02-deploy
          terraform init -reconfigure
          just apply
        env:
          GH_PR_NUMBER: ${{ github.event.pull_request.number }}
          TF_VAR_auth_secret: ${{ secrets.TF_VAR_AUTH_SECRET }}
          TF_VAR_openai_api_key: ${{ secrets.TF_VAR_OPENAI_API_KEY }}
          TF_VAR_anthropic_api_key: ${{ secrets.TF_VAR_ANTHROPIC_API_KEY }}
          TF_VAR_google_generative_ai_api_key: ${{ secrets.TF_VAR_GOOGLE_GENERATIVE_AI_API_KEY }}
          TF_VAR_vercel_api_token: ${{ secrets.TF_VAR_VERCEL_API_TOKEN }}
          TF_VAR_webapi_image_tag: umans-platform-webapi-${{ github.sha }}
          TF_VAR_worker_image_tag: umans-platform-worker-${{ github.sha }}

  cleanup:
    needs: detect-changes
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.10"

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin

      - name: Download Lambda package
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: issue-solver

      # Add authentication steps here if needed
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::034362042699:role/GitHubActionsRole
          role-session-name: SessionGitHubActions
          aws-region: eu-west-3

      - name: Destroy deploy
        run: |
          cd operations/02-deploy
          terraform init -reconfigure
          just destroy
        env:
          GH_PR_NUMBER: ${{ github.event.pull_request.number }}
          TF_VAR_auth_secret: ${{ secrets.TF_VAR_AUTH_SECRET }}
          TF_VAR_openai_api_key: ${{ secrets.TF_VAR_OPENAI_API_KEY }}
          TF_VAR_anthropic_api_key: ${{ secrets.TF_VAR_ANTHROPIC_API_KEY }}
          TF_VAR_google_generative_ai_api_key: ${{ secrets.TF_VAR_GOOGLE_GENERATIVE_AI_API_KEY }}
          TF_VAR_vercel_api_token: ${{ secrets.TF_VAR_VERCEL_API_TOKEN }}
          TF_VAR_webapi_image_tag: umans-platform-webapi-${{ github.sha }}
          TF_VAR_worker_image_tag: umans-platform-worker-${{ github.sha }}

      - name: Destroy provision
        run: |
          cd operations/01-provision
          terraform init -reconfigure
          just destroy
        env:
          GH_PR_NUMBER: ${{ github.event.pull_request.number }}
          TF_VAR_supabase_token: ${{ secrets.TF_VAR_SUPABASE_TOKEN }}
          TF_VAR_supabase_organization_slug: ${{ secrets.TF_VAR_SUPABASE_ORGANIZATION_SLUG }} 