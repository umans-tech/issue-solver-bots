name: Continuous Deployment Workflow

on:
  push:
    branches:
      - main
    paths:
      - 'operations/01-provision/**'
      - 'operations/02-deploy/**'
      - 'conversational-ui/**'
      - 'issue-solver/**'
      - '.github/workflows/cd-workflow.yml'
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    paths:
      - 'operations/01-provision/**'
      - 'operations/02-deploy/**'
      - 'conversational-ui/**'
      - 'issue-solver/**'
      - '.github/workflows/cd-workflow.yml'

permissions:
  id-token: write
  contents: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      workflow-changes: ${{ steps.filter.outputs.workflow }}
      provision-changes: ${{ steps.filter.outputs.provision }}
      deploy-changes: ${{ steps.filter.outputs.deploy }}
      app-changes: ${{ steps.filter.outputs.app }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            workflow:
              - '.github/workflows/cd-workflow.yml'
            provision:
              - 'operations/01-provision/**'
            deploy:
              - 'operations/02-deploy/**'
            app:
              - 'conversational-ui/**'
              - 'issue-solver/**'

  provision:
    needs: detect-changes
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.provision-changes == 'true' || needs.detect-changes.outputs.deploy-changes == 'true' || needs.detect-changes.outputs.app-changes == 'true' || needs.detect-changes.outputs.workflow-changes == 'true')) ||
      (github.event_name == 'pull_request' && github.event.action != 'closed' && (needs.detect-changes.outputs.provision-changes == 'true' || needs.detect-changes.outputs.deploy-changes == 'true' || needs.detect-changes.outputs.app-changes == 'true' || needs.detect-changes.outputs.workflow-changes == 'true'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.10"

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin

      # Add authentication steps here if needed
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::034362042699:role/GitHubActionsRole
          role-session-name: SessionGitHubActions
          aws-region: eu-west-3

      - name: Apply provision
        run: |
          cd operations/01-provision
          terraform init -reconfigure
          just apply
        env:
          GH_PR_NUMBER: ${{ github.event.pull_request.number }}
          TF_VAR_supabase_token: ${{ secrets.TF_VAR_SUPABASE_TOKEN }}
          TF_VAR_supabase_organization_slug: ${{ secrets.TF_VAR_SUPABASE_ORGANIZATION_SLUG }}

  package:
    needs: [ detect-changes ]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.deploy-changes == 'true' || needs.detect-changes.outputs.app-changes == 'true' || needs.detect-changes.outputs.workflow-changes == 'true')) ||
      (github.event_name == 'pull_request' && github.event.action != 'closed' && (needs.detect-changes.outputs.deploy-changes == 'true' || needs.detect-changes.outputs.app-changes == 'true' || needs.detect-changes.outputs.workflow-changes == 'true'))
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./issue-solver
    env:
      IMAGE_ENV_TAG: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || 'production' }}
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v2

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        run: uv python install

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::034362042699:role/GitHubActionsRole
          role-session-name: SessionGitHubActions
          aws-region: eu-west-3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push webapi container image
        uses: docker/build-push-action@v6
        with:
          context: 'issue-solver'
          file: issue-solver/webapi.Dockerfile
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-webapi-${{ github.sha }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-webapi-${{ env.IMAGE_ENV_TAG }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-webapi-${{ env.IMAGE_ENV_TAG }}-${{ github.sha }}

      - name: Build and push worker container image
        uses: docker/build-push-action@v6
        with:
          context: 'issue-solver'
          file: issue-solver/worker.Dockerfile
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-worker-${{ github.sha }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-worker-${{ env.IMAGE_ENV_TAG }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-worker-${{ env.IMAGE_ENV_TAG }}-${{ github.sha }}

      - name: Build and push conversational-ui container image
        uses: docker/build-push-action@v6
        with:
          context: 'conversational-ui'
          file: conversational-ui/Dockerfile
          push: true
          build-args: |
            POSTGRES_URL=postgresql://user:password@localhost:5432/dummy
            REDIS_URL=redis://localhost:6379
            OPENAI_API_KEY=sk-dummy-key-for-build-only
            EXA_API_KEY=exa-dummy-key-for-build-only
            EMAIL_API_KEY=dummy-email-key-for-build-only
            EMAIL_FROM="sender@domain"
            POSTHOG_KEY=dummy-key-for-build-only
            POSTHOG_HOST="https://eu.i.posthog.com"
            STRIPE_SECRET_KEY=sk_test_dummy_key_for_build_only
            STRIPE_WEBHOOK_SECRET=whsec_dummy_key_for_build_only
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-conversational-ui-${{ github.sha }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-conversational-ui-${{ env.IMAGE_ENV_TAG }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-3.amazonaws.com/umans-platform:umans-platform-conversational-ui-${{ env.IMAGE_ENV_TAG }}-${{ github.sha }}

  deploy:
    needs: [ detect-changes, provision, package ]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.deploy-changes == 'true' || needs.detect-changes.outputs.app-changes == 'true' || needs.detect-changes.outputs.workflow-changes == 'true')) ||
      (github.event_name == 'pull_request' && github.event.action != 'closed' && (needs.detect-changes.outputs.deploy-changes == 'true' || needs.detect-changes.outputs.app-changes == 'true' || needs.detect-changes.outputs.workflow-changes == 'true'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.10"

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        run: |
          cd issue-solver
          uv python install

      - name: Install the project
        run: |
          cd issue-solver
          uv sync --all-extras --dev

      # Add authentication steps here if needed
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::034362042699:role/GitHubActionsRole
          role-session-name: SessionGitHubActions
          aws-region: eu-west-3

      - name: Run migrations
        run: |
          cd operations/01-provision
          terraform init -reconfigure
          just init
          export DATABASE_URL=$(just backend-direct-database-url)
          cd ../../issue-solver
          uv sync
          just db-upgrade
        env:
          GH_PR_NUMBER: ${{ github.event.pull_request.number }}
          TF_VAR_supabase_token: ${{ secrets.TF_VAR_SUPABASE_TOKEN }}
          TF_VAR_supabase_organization_slug: ${{ secrets.TF_VAR_SUPABASE_ORGANIZATION_SLUG }}
          TOKEN_ENCRYPTION_KEY: ${{ secrets.TF_VAR_TOKEN_ENCRYPTION_KEY }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        run: |
          npm install -g pnpm

      - name: Run conversational-ui migrations
        run: |
          cd operations/01-provision
          terraform init -reconfigure
          just init
          export POSTGRES_URL=$(just frontend-database-url)
          cd ../../conversational-ui
          pnpm install
          just migrate
        env:
          GH_PR_NUMBER: ${{ github.event.pull_request.number }}
          NODE_ENV: production
          TF_VAR_supabase_token: ${{ secrets.TF_VAR_SUPABASE_TOKEN }}
          TF_VAR_supabase_organization_slug: ${{ secrets.TF_VAR_SUPABASE_ORGANIZATION_SLUG }}

      - name: Apply deploy
        run: |
          cd operations/02-deploy
          terraform init -reconfigure
          just apply
        env:
          GH_PR_NUMBER: ${{ github.event.pull_request.number }}
          TF_VAR_auth_secret: ${{ secrets.TF_VAR_AUTH_SECRET }}
          TF_VAR_auth_google_id: ${{ secrets.TF_VAR_AUTH_GOOGLE_ID }}
          TF_VAR_auth_google_secret: ${{ secrets.TF_VAR_AUTH_GOOGLE_SECRET }}
          TF_VAR_openai_api_key: ${{ secrets.TF_VAR_OPENAI_API_KEY }}
          TF_VAR_anthropic_api_key: ${{ secrets.TF_VAR_ANTHROPIC_API_KEY }}
          TF_VAR_google_generative_ai_api_key: ${{ secrets.TF_VAR_GOOGLE_GENERATIVE_AI_API_KEY }}
          TF_VAR_exa_api_key: ${{ secrets.TF_VAR_EXA_API_KEY }}
          TF_VAR_email_api_key: ${{ secrets.TF_VAR_EMAIL_API_KEY }}
          TF_VAR_token_encryption_key: ${{ secrets.TF_VAR_TOKEN_ENCRYPTION_KEY }}
          TF_VAR_webapi_image_tag: umans-platform-webapi-${{ github.sha }}
          TF_VAR_worker_image_tag: umans-platform-worker-${{ github.sha }}
          TF_VAR_conversational_ui_image_tag: umans-platform-conversational-ui-${{ github.sha }}
          TF_VAR_morph_api_key: ${{ secrets.TF_VAR_MORPH_API_KEY }}
          TF_VAR_posthog_key: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') && secrets.TF_VAR_POSTHOG_KEY_PROD || secrets.TF_VAR_POSTHOG_KEY_DEV }}
          STRIPE_SECRET_KEY_PROD: ${{ secrets.TF_VAR_STRIPE_SECRET_KEY_PROD }}
          STRIPE_SECRET_KEY_DEV: ${{ secrets.TF_VAR_STRIPE_SECRET_KEY_DEV }}
  cleanup:
    needs: detect-changes
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.10"

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::034362042699:role/GitHubActionsRole
          role-session-name: SessionGitHubActions
          aws-region: eu-west-3

      - name: Destroy deploy
        run: |
          cd operations/02-deploy
          terraform init -reconfigure
          just destroy
        env:
          GH_PR_NUMBER: ${{ github.event.pull_request.number }}
          TF_VAR_auth_secret: ${{ secrets.TF_VAR_AUTH_SECRET }}
          TF_VAR_auth_google_id: ${{ secrets.TF_VAR_AUTH_GOOGLE_ID }}
          TF_VAR_auth_google_secret: ${{ secrets.TF_VAR_AUTH_GOOGLE_SECRET }}
          TF_VAR_openai_api_key: ${{ secrets.TF_VAR_OPENAI_API_KEY }}
          TF_VAR_anthropic_api_key: ${{ secrets.TF_VAR_ANTHROPIC_API_KEY }}
          TF_VAR_google_generative_ai_api_key: ${{ secrets.TF_VAR_GOOGLE_GENERATIVE_AI_API_KEY }}
          TF_VAR_exa_api_key: ${{ secrets.TF_VAR_EXA_API_KEY }}
          TF_VAR_email_api_key: ${{ secrets.TF_VAR_EMAIL_API_KEY }}
          TF_VAR_token_encryption_key: ${{ secrets.TF_VAR_TOKEN_ENCRYPTION_KEY }}
          TF_VAR_webapi_image_tag: umans-platform-webapi-${{ github.sha }}
          TF_VAR_worker_image_tag: umans-platform-worker-${{ github.sha }}
          TF_VAR_conversational_ui_image_tag: umans-platform-conversational-ui-${{ github.sha }}
          TF_VAR_morph_api_key: ${{ secrets.TF_VAR_MORPH_API_KEY }}
          TF_VAR_posthog_key: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') && secrets.TF_VAR_POSTHOG_KEY_PROD || secrets.TF_VAR_POSTHOG_KEY_DEV }}
      - name: Destroy provision
        run: |
          cd operations/01-provision
          terraform init -reconfigure
          just destroy
        env:
          GH_PR_NUMBER: ${{ github.event.pull_request.number }}
          TF_VAR_supabase_token: ${{ secrets.TF_VAR_SUPABASE_TOKEN }}
          TF_VAR_supabase_organization_slug: ${{ secrets.TF_VAR_SUPABASE_ORGANIZATION_SLUG }} 